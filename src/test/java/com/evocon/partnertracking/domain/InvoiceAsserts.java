package com.evocon.partnertracking.domain;

import static com.evocon.partnertracking.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InvoiceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAllPropertiesEquals(Invoice expected, Invoice actual) {
        assertInvoiceAutoGeneratedPropertiesEquals(expected, actual);
        assertInvoiceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAllUpdatablePropertiesEquals(Invoice expected, Invoice actual) {
        assertInvoiceUpdatableFieldsEquals(expected, actual);
        assertInvoiceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAutoGeneratedPropertiesEquals(Invoice expected, Invoice actual) {
        assertThat(actual)
            .as("Verify Invoice auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceUpdatableFieldsEquals(Invoice expected, Invoice actual) {
        assertThat(actual)
            .as("Verify Invoice relevant properties")
            .satisfies(a -> assertThat(a.getInvoiceId()).as("check invoiceId").isEqualTo(expected.getInvoiceId()))
            .satisfies(a -> assertThat(a.getClientId()).as("check clientId").isEqualTo(expected.getClientId()))
            .satisfies(a -> assertThat(a.getPartnerId()).as("check partnerId").isEqualTo(expected.getPartnerId()))
            .satisfies(a ->
                assertThat(a.getInvoiceAmount())
                    .as("check invoiceAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getInvoiceAmount())
            )
            .satisfies(a -> assertThat(a.getInvoiceDate()).as("check invoiceDate").isEqualTo(expected.getInvoiceDate()))
            .satisfies(a -> assertThat(a.getInvoiceType()).as("check invoiceType").isEqualTo(expected.getInvoiceType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceUpdatableRelationshipsEquals(Invoice expected, Invoice actual) {
        assertThat(actual)
            .as("Verify Invoice relationships")
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getPartner()).as("check partner").isEqualTo(expected.getPartner()));
    }
}
