package com.evocon.partnertracking.domain;

import static com.evocon.partnertracking.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InvoiceLineAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineAllPropertiesEquals(InvoiceLine expected, InvoiceLine actual) {
        assertInvoiceLineAutoGeneratedPropertiesEquals(expected, actual);
        assertInvoiceLineAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineAllUpdatablePropertiesEquals(InvoiceLine expected, InvoiceLine actual) {
        assertInvoiceLineUpdatableFieldsEquals(expected, actual);
        assertInvoiceLineUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineAutoGeneratedPropertiesEquals(InvoiceLine expected, InvoiceLine actual) {
        assertThat(actual)
            .as("Verify InvoiceLine auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineUpdatableFieldsEquals(InvoiceLine expected, InvoiceLine actual) {
        assertThat(actual)
            .as("Verify InvoiceLine relevant properties")
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceLineUpdatableRelationshipsEquals(InvoiceLine expected, InvoiceLine actual) {
        assertThat(actual)
            .as("Verify InvoiceLine relationships")
            .satisfies(a -> assertThat(a.getLicense()).as("check license").isEqualTo(expected.getLicense()))
            .satisfies(a -> assertThat(a.getInvoice()).as("check invoice").isEqualTo(expected.getInvoice()));
    }
}
