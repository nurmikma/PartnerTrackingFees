package com.evocon.partnertracking.domain;

import static com.evocon.partnertracking.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CommissionRuleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionRuleAllPropertiesEquals(CommissionRule expected, CommissionRule actual) {
        assertCommissionRuleAutoGeneratedPropertiesEquals(expected, actual);
        assertCommissionRuleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionRuleAllUpdatablePropertiesEquals(CommissionRule expected, CommissionRule actual) {
        assertCommissionRuleUpdatableFieldsEquals(expected, actual);
        assertCommissionRuleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionRuleAutoGeneratedPropertiesEquals(CommissionRule expected, CommissionRule actual) {
        assertThat(actual)
            .as("Verify CommissionRule auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionRuleUpdatableFieldsEquals(CommissionRule expected, CommissionRule actual) {
        assertThat(actual)
            .as("Verify CommissionRule relevant properties")
            .satisfies(a -> assertThat(a.getRuleName()).as("check ruleName").isEqualTo(expected.getRuleName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getStartDay()).as("check startDay").isEqualTo(expected.getStartDay()))
            .satisfies(a -> assertThat(a.getEndDay()).as("check endDay").isEqualTo(expected.getEndDay()))
            .satisfies(a ->
                assertThat(a.getCommissionPercentage())
                    .as("check commissionPercentage")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCommissionPercentage())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionRuleUpdatableRelationshipsEquals(CommissionRule expected, CommissionRule actual) {
        assertThat(actual)
            .as("Verify CommissionRule relationships")
            .satisfies(a -> assertThat(a.getCommissionRuleSet()).as("check commissionRuleSet").isEqualTo(expected.getCommissionRuleSet()));
    }
}
